#!/usr/bin/env python3

import argparse
from collections import namedtuple
from datetime import datetime, timedelta, date
import dateutil.parser
from dateutil.tz import tzlocal
import os
from itertools import takewhile, dropwhile
from inspect import signature
import json
import pytz
import re
import shutil
from setproctitle import setproctitle
import sqlite3
from subprocess import Popen, PIPE
import sys
import texttable
import time
import traceback

IS_LINUX = sys.platform == 'linux'
IS_MAC = sys.platform == 'darwin'

if IS_MAC:
    from AppKit import NSWorkspace
    from Quartz import (
        CGWindowListCopyWindowInfo,
        kCGWindowListOptionOnScreenOnly,
        kCGNullWindowID
    )
    import pync

setproctitle('tau')
SCRIPT_DIR = os.path.dirname(os.path.realpath(__file__))
DB = sqlite3.connect(os.path.join(SCRIPT_DIR, 'tau.db'))


def main():
    args = parse_args()
    dispatch(args)


def dispatch(args):
    f = args.func
    argc = len(signature(f).parameters)
    if argc == 0:
        f()
        return
    if argc == 1:
        f(args)
        return
    raise RuntimeError(f'Unexpected function signature for {f}: {signature(f)}')


def commit_and_close():
    DB.commit()
    DB.close()


def printerr(*args, **kwargs):
    print(*args, file=sys.stderr, **kwargs)


def get_argument_parser():
    p = argparse.ArgumentParser(description='Tau time tracker')

    p.add_argument(
        '--tz', nargs='?', type=pytz.timezone, default=tzlocal(),
        help='Timezone to be used; defaults to system timezone'
    )

    command_p = p.add_subparsers(
        dest='command', parser_class=CommandArgumentParser)

    track_p = command_p.add_parser('track', func=do_track)
    track_p.add_argument('type', choices=track_types)

    view_p = command_p.add_parser('view', func=do_view)
    view_p.add_argument(
        '--count', nargs='?', type=int,
        help='Rows returned for view command; defaults to 100'
    )
    view_p.add_argument(
        '--reverse', action='store_const', const=True, default=False,
        help='Reverse the output, sort earliest to latest'
    )
    view_p.add_argument(
        '--start', nargs='?', type=parse_local_datetime_arg,
        help='Select a start time for filtering entries'
    )
    view_p.add_argument(
        '--stop', nargs='?', type=parse_local_datetime_arg,
        help='Select a stop time for filtering entries'
    )
    view_p.add_argument(
        '--day', nargs='?', type=dateutil.parser.parse,
        help='Select a date for filtering entries (equivalent to --start and --stop for date)'
    )
    view_p.add_argument(
        '--pager', default='less',
        help="Pager for view command; defaults to 'less'"
    )
    view_p.add_argument(
        '--nopager', action='store_const', const=True, default=False,
        help='Disable pager for view command'
    )
    view_p.add_argument(
        '--format', choices=['table', 'json'], default='table',
        help='Output format for viewing entries (default is table)'
    )

    timecard_p = command_p.add_parser('timecard', func=do_timecard)
    timecard_p.add_argument('date', nargs='?', type=timecard_date_str)
    timecard_p.add_argument('--group-threshold', type=int, nargs='?',
                            default=DEFAULT_TIMECARD_GROUP_THRESHOLD,
                            help='Default minutes threshold for group summary')

    active_p = command_p.add_parser('active', func=do_active)
    active_p.add_argument(
        '--minutes', action='store_const', const=True, default=False,
        help='Output only minutes for active command'
    )

    return p


class CommandArgumentParser(argparse.ArgumentParser):
    def __init__(self, *args, **kwargs):
        self.func = kwargs.pop('func')
        super(CommandArgumentParser, self).__init__(*args, **kwargs)

    def parse_known_args(self, *args, **kwargs):
        namespace, args = super(CommandArgumentParser, self).parse_known_args(
            *args, **kwargs)
        namespace.func = self.func
        return namespace, args


def parse_local_datetime_arg(s):
    return dateutil.parser.parse(s)


def timecard_date_str(s):
    try:
        n = int(s)
    except ValueError:
        pass
    else:
        if n <= 0:
            return str(date.today() + timedelta(days=n))
        else:
            raise ValueError(f'Relative timecard date must be <= 0 days; got {n}')
    try:
        return str(dateutil.parser.parse(s).date())
    except ValueError:
        raise ValueError(f'Invalid timecard date: {s}')


def parse_args():
    p = get_argument_parser()
    args = p.parse_args()
    if not args.command:
        p.print_help()
        exit(1)
    return args


def switch_os(**kwargs):
    linux = kwargs.pop('linux')
    mac = kwargs.pop('mac')
    if kwargs: raise TypeError('Unexpected kwargs: {}'.format(kwargs.keys()))
    if IS_LINUX: return call_if_callable(linux)
    if IS_MAC: return call_if_callable(mac)


def call_if_callable(x): return x() if callable(x) else x


def get_title(): return switch_os(linux=_get_title_linux, mac=_get_title_mac)


def _get_title_linux():
    p = Popen(["xdotool", "getwindowfocus", "getwindowname"], stdout=PIPE,
              stderr=PIPE)
    p.wait()
    out = p.stdout.read()
    if p.returncode != 0 or not out:
        if p.returncode != 0:
            printerr(f'xdotool failed with nonzero exit code {p.returncode}')
        elif not out:
            printerr(f'xdotool failed to return output')
        if out:
            printerr(f'stdout was: {out}')
        err = p.stderr.read()
        if err:
            printerr(f'stderr was: {err}')
        exit(1)
    out = out.decode('utf8').strip()
    return out


def _get_title_mac():
    app = NSWorkspace.sharedWorkspace().frontmostApplication()
    active_app_name = app.localizedName()

    options = kCGWindowListOptionOnScreenOnly
    windowList = CGWindowListCopyWindowInfo(options, kCGNullWindowID)
    windowTitle = None
    for window in windowList:
        windowNumber = window['kCGWindowNumber']
        ownerName = window['kCGWindowOwnerName']
        windowTitle = window.get('kCGWindowName', u'Unknown')
        if windowTitle and ownerName == active_app_name:
            break
    return active_app_name + ' :: ' + windowTitle


def get_entry_state():
    """Useful for dumping extra info to the db for additional time analysis
    :rtype: dict|None
    """
    last_work_dir = None
    last_work_dir_cache = os.path.expanduser('~/.oh-my-zsh/cache/last-working-dir')
    try:
        stale_seconds = time.time() - os.stat(last_work_dir_cache).st_mtime
        with open(last_work_dir_cache) as h:
            last_work_dir = h.read().strip()
        # Every time a zsh is started or a 'cd' command is issued, the
        # last_work_dir_cache is touched and its stale_seconds should be reset.
        # If we've gone 24 hours without touching this file, let's consider it
        # too stale for use. This might mean that we're using a different shell
        # or something else is going on to where this info can't be used.
        if stale_seconds / 60 / 60 > 24:
            last_work_dir = None
    except FileNotFoundError:
        pass
    if last_work_dir is None:
        return None
    p = Popen(
        ['git', 'rev-parse', 'HEAD', '--abbrev-ref', 'HEAD'],
        cwd=last_work_dir,
        stdout=PIPE
    )
    if p.wait() != 0:
        printerr(f'Failed to get last work dir branch, exit code {p.returncode}')
        return None
    rev, branch = p.stdout.read().decode('utf8').splitlines()
    return {
        'workDir': last_work_dir,
        'gitRev': rev,
        'gitBranch': branch,
    }


def get_idle_time():
    return switch_os(linux=_get_idle_time_linux, mac=_get_idle_time_mac)


def _get_idle_time_linux():
    p = Popen(["xssstate", "-i"], stdout=PIPE)
    p.wait()
    out = p.stdout.read()
    if p.returncode != 0:
        printerr(f'xssstate failed with nonzero exit code {p.returncode}')
        exit(1)
    return int(out.decode('utf8').strip()) / 1000


def _get_idle_time_mac():
    p = Popen([
        'bash', '-c',
        'echo $(($(ioreg -c IOHIDSystem | grep HIDIdleTime | cut -d= -f2) / 1000000000))'
    ], stdout=PIPE)
    p.wait()
    out = p.stdout.read()
    if p.returncode != 0:
        printerr(f'ioreg failed with nonzero exit code {p.returncode}')
        exit(1)
    return int(out.decode('utf8').strip())


IDLE_THRESHOLD = 300  # 5 minutes


# We're considering the user as inactive if they have been idle for 5 minutes
def is_inactive(title):
    return title in INACTIVE_APPLICATIONS or get_idle_time() > IDLE_THRESHOLD


def DB_execute_log_sql(sql, args=()):
    printerr('DB.execute({!r}, {!r})'.format(sql, args))
    return DB.execute(sql, args)


def init_db():
    DB_execute_log_sql("""
        create table if not exists
        entries(
            id integer primary key autoincrement,
            title text,
            start integer,
            stop integer default null
        )
    """)

    def column_exists(col_name):
        [n] = DB_execute_log_sql("""
            select count(*)
            from pragma_table_info('entries')
            where name = ?
        """, (col_name,)).fetchone()
        return n != 0

    def add_column_if_not_exists(col_name, col_type):
        if not column_exists(col_name):
            DB_execute_log_sql("""
                alter table entries add column {} {}
            """.format(col_name, col_type))

    add_column_if_not_exists('state', 'json')


class Entry:
    @classmethod
    def from_row(cls, r):
        if r is None:
            return None
        try:
            id, title, start, stop, state = r
        except ValueError as e:
            raise RuntimeError(f'Expected 5 columns but got {len(r)}', e)
        if state is not None:
            state = json.loads(state)
        return Entry(id, title, start, stop, state)

    def __init__(self, id, title, start, stop, state):
        self.id = id
        self.title = title
        self.start = start
        self.stop = stop
        self.state = state

    def __repr__(self):
        return (
                'Entry(' +
                ', '.join((
                    repr(self.id),
                    repr(self.title),
                    repr(self.start),
                    repr(self.stop),
                    repr(self.state)
                )) +
                ')'
        )


def fetch_latest_entry():
    return Entry.from_row(
        DB.execute("""
            select id, title, start, stop, state
            from entries
            order by id desc
            limit 1
        """).fetchone()
    )


def do_active(args):
    if is_inactive(get_title()):
        if args.minutes:
            print(0)
        else:
            print('Inactive')
        return
    # Consider the user as active as long as they have not had gaps longer than
    # 120 seconds in between time entries.
    active_window = 120
    now = utcnow_timestamp()
    ref = now
    last = Entry.from_row(
        DB.execute("""
            select id, title, start, stop, state
            from entries
            order by id desc
            limit 1
        """).fetchone()
    )
    # The `last.stop is None` check is just for the first record.
    while last.stop is None or ref - last.stop < active_window:
        ref = last.start
        last = Entry.from_row(
            DB.execute("""
                select id, title, start, stop, state
                from entries
                where id < ?
                order by id desc
                limit 1
            """, [last.id]).fetchone()
        )
    td = timedelta(seconds=now - ref)
    if args.minutes:
        print(int(td.total_seconds() / 60))
    else:
        print(td)


def do_view(args):
    if args.count and args.count < 0:
        printerr(f'Invalid --count {args.count}; must be > 0')
        exit(1)
    if args.day:
        if (args.start, args.stop) != (None, None):
            printerr('Cannot supply --day with --start or --stop')
            exit(1)
        # Invert --reverse by default.
        args.reverse = not args.reverse
        args.start = args.day
        args.stop = args.day + timedelta(days=1)
    if args.format == 'json':
        print(draw_json(args))
        return
    if args.format == 'table':
        table = draw_table(args)
        if args.nopager:
            print(table)
            return
        try:
            p = Popen(args.pager, stdin=PIPE)
            p.stdin.write(table.encode('utf8'))
            p.stdin.close()
            p.wait()
        except KeyboardInterrupt:
            pass
        return
    printerr('Invalid format type {!r}'.format(args.format))
    exit(1)


def do_timecard(args):
    if args.date is None:
        args.date = str(date.today())
    c = DB.cursor()
    c.execute("select id, title, start, stop, state from entries order by id desc")
    it = map(Entry.from_row, c)
    list(takewhile(
        lambda x: x and timestamp_to_local_date_string(x.start, args.tz) > args.date,
        it))
    entries = list(takewhile(
        lambda x: x and timestamp_to_local_date_string(x.start, args.tz) == args.date,
        it))
    c.close()
    by_title = {}
    for entry in entries:
        group = get_title_group(entry.title)
        title_sum = by_title.get(group)
        if not title_sum:
            title_sum = 0
        if entry.start and entry.stop:
            title_sum += entry.stop - entry.start
        by_title[group] = title_sum
    punches = []
    last_punch_title_groups = None
    for entry in reversed(entries):
        if not entry.stop:
            continue
        if not punches:
            punch = TimecardPunch(entry)
            punches.append(punch)
            last_punch_title_groups = {punch.title_group: punch.duration()}
        else:
            last_punch = punches[-1]
            if abs(last_punch.stop - entry.start) < IDLE_THRESHOLD:
                # Update last_punch's stop time.
                last_punch.stop = entry.stop
                # Update last_punch's title_group to be the mode.
                partial_punch = TimecardPunch(entry)
                title_group_dur = last_punch_title_groups.get(
                    partial_punch.title_group, 0)
                last_punch_title_groups[partial_punch.title_group] = \
                    title_group_dur + partial_punch.duration()
                last_punch.title_group, last_punch.group_dur = max(
                    last_punch_title_groups.items(),
                    key=lambda kv: kv[1])
            else:
                punch = TimecardPunch(entry)
                punches.append(punch)
                last_punch_title_groups = {punch.title_group: punch.duration()}
    print('/================================\\')
    print('|  Timecard: {}    |'.format(
        dateutil.parser.parse(args.date).date().strftime('%a, %h %-d, %Y')))
    print('\\================================/')
    print()
    print('Punches')
    print('------------------')
    print('Acc     | In       - Out      | Dur     | Group Mode')
    acc = timedelta()
    for punch in punches:
        seconds = punch.duration()
        if seconds > IDLE_THRESHOLD:
            dur = timedelta(seconds=seconds)
            acc += dur
            print('{} | {} - {} | {} | [{}|{}%] {} '.format(
                acc,
                timestamp_to_local(punch.start, args.tz, '%I:%M %p').lower(),
                timestamp_to_local(punch.stop, args.tz, '%I:%M %p').lower(),
                dur,
                timedelta(seconds=punch.group_dur),
                round(float(punch.group_dur) / dur.seconds * 100),
                punch.title_group,
            ))
    print()
    print('Timecard by title group')
    print('--------------------------')
    by_title_sorted = sorted(
        ((k, timedelta(seconds=v)) for k, v in by_title.items()
         if v >= args.group_threshold),
        key=lambda t: -t[1])
    for k, v in by_title_sorted:
        print('{}: {}'.format(k, v))


DEFAULT_TIMECARD_GROUP_THRESHOLD = 600  # 10 minutes


class TimecardPunch:
    def __init__(self, entry):
        self.start = entry.start
        self.stop = entry.stop
        self.title_group = get_title_group(entry.title)
        self.group_dur = self.duration()

    def duration(self):
        return self.stop - self.start


class TitleGroupHandler:
    def __init__(self, name, pattern, handler=None):
        self.name = name
        self.pattern = pattern
        if isinstance(handler, str):
            self.handler = lambda _: handler
        elif handler is None:
            self.handler = lambda _: name
        elif callable(handler):
            self.handler = handler
        else:
            raise ValueError(
                'Invalid handler {}; expected callable, str or None; got {!r}'
                    .format(name, handler))

    def __call__(self, title):
        m = self.pattern.match(title)
        if not m:
            return None
        return self.handler(m)


TITLE_GROUP_HANDLERS = [
    TitleGroupHandler(
        'IntelliJ', re.compile(r'^([^\[]+\[[^\]]+\]).* - IntelliJ IDEA$'),
        lambda m: 'IntelliJ: {}'.format(m.group(1))),
    TitleGroupHandler(
        'Vim', re.compile(r'^(v|vim) ([^:]+):(.*)$'),
        lambda m: 'Vim: {}'.format(m.group(3))),
    TitleGroupHandler(
        'Terminal', re.compile(r'^zsh:(.*)$'),
        lambda m: 'Terminal: {}'.format(m.group(1))),
    TitleGroupHandler('YouTube', re.compile(r'^.*\bYouTube\b.*$')),
    TitleGroupHandler('Pull Request', re.compile(r'^.* Pull Request .*$')),
    TitleGroupHandler('Chrome', re.compile(r'^.* - Google Chrome$')),
]


def get_title_group(title):
    for handler in TITLE_GROUP_HANDLERS:
        res = handler(title)
        if res is not None:
            return res
    return title


def run_view_query(args):
    wheres = []
    q_args = []
    if args.start:
        wheres.append('start >= ?')
        q_args.append(args.start.timestamp())
    if args.stop:
        wheres.append('stop <= ?')
        q_args.append(args.stop.timestamp())
    if args.reverse:
        order = 'order by id asc'
    else:
        order = 'order by id desc'
    if args.start and args.stop and not args.count:
        limit = ''
    elif args.count == 0:
        limit = ''
    else:
        limit = f'limit {args.count or 1000}'
    if wheres:
        where = 'where ' + ' and '.join(f'({w})' for w in wheres)
    else:
        where = ''
    sql_args = [
        f"""
            select id, title, start, stop, state
            from entries
            {where}
            {order}
            {limit}
        """,
        q_args
    ]
    return DB.execute(*sql_args)


def draw_table(args):
    # Using 0 as the default since that signals to texttable to use an unlimited width.
    (cols, _) = shutil.get_terminal_size((0, 0))
    table = texttable.Texttable(max_width=cols)
    table.add_rows([
        ['ID', 'Title', 'Start', 'Stop', 'Group', 'State'],
        *((
            r[0],
            r[1],
            timestamp_to_local(r[2], args.tz),
            timestamp_to_local(r[3], args.tz),
            get_title_group(r[1]),
            r[4],
        ) for r in run_view_query(args))
    ])
    return table.draw()


def draw_json(args):
    return json.dumps(mk_json(args))


def mk_json(args):

    def to_utc(ts):
        return datetime.fromtimestamp(ts) \
            .replace(tzinfo=pytz.UTC).isoformat()[:-6] + 'Z'

    def to_local(ts):
        return datetime.fromtimestamp(ts) \
            .replace(tzinfo=pytz.UTC).astimezone(args.tz).isoformat()

    return [
        {
            'id': r[0],
            'title': r[1],
            'group': get_title_group(r[1]),
            'start': {
                'timestamp': r[2],
                'utc': to_utc(r[2]),
                'localized': to_local(r[2]),
            },
            'stop': {
                'timestamp': r[3],
                'utc': to_utc(r[3]),
                'localized': to_local(r[3]),
            }
        }
        for r in run_view_query(args)
    ]


def timestamp_to_local(timestamp, tz, format=None):
    if not timestamp:
        return ''
    if not format:
        if IS_MAC:
            format = '%B %-d, %Y | %I:%M %p'
        else:
            format = '%B %-d, %Y | %I:%M %P'
    return (
        pytz.utc.localize(datetime.fromtimestamp(timestamp))
            .astimezone(tz)
            .strftime(format)
    )


def timestamp_to_local_date_string(timestamp, tz):
    return timestamp_to_local(timestamp, tz, '%Y-%m-%d')


def do_track(args):
    f = track_types.get(args.type)
    if not f:
        printerr(
            f"Invalid track type {repr(args.type)}, must be one of: "
            + ' '.join(map(repr, track_types)))
        exit(1)
    f()


def do_track_oneshot():
    try:
        run_track_db_actions()
        DB.commit()
    except:
        (_, e, tb) = sys.exc_info()
        message = [f'track failed with exception {repr(e)}:']
        message.extend(traceback.format_tb(tb))
        message = '\n'.join(message)
        printerr(message)
        if IS_MAC:
            pync.notify(message, title='tau')


def do_track_daemon():
    while True:
        do_track_oneshot()
        time.sleep(60)


track_types = {
    'oneshot': do_track_oneshot,
    'daemon': do_track_daemon,
}


def run_track_db_actions():
    title = get_title()
    if is_inactive(title):
        return
    init_db()
    latest = fetch_latest_entry()
    if latest:
        # If the latest.title matches, check to see if it's within a time window
        # to infer that we're *still* working on it. If we are, we will bail out
        # with return and won't have to add a new entry.
        if latest.title == title:
            if within_static_window(latest.stop) or within_static_window(
                    latest.start):
                update_entry_stop(latest, utcnow_timestamp())
                return
        # If the title doesn't match, check to see if the latest.stop is None.
        # If it's None, let's just assume we worked on the task for 1 minute.
        # We need to proceed and add_entry() after this since we haven't accounted
        # for the new title.
        if not latest.stop:
            update_entry_stop(latest, latest.start + 60)

    add_entry(title, utcnow_timestamp())


def update_entry_stop(entry, stop):
    print(f'Updating stop to {stop} for entry {entry}')
    DB.execute("update entries set stop = ? where id = ?", (stop, entry.id))


def add_entry(title, start):
    state = json.dumps(get_entry_state())
    print(f'Adding entry {repr(title)} at start {start} with state {state}')
    DB.execute("insert into entries (title, start, state) values (?, ?, json(?))",
               (title, start, state))


def utcnow_timestamp():
    return int(datetime.utcnow().timestamp())


# If our activity didnt change within a 120 second window,
# then assume we've been working on it since. This should work since
# this script runs every minute.
def within_static_window(timestamp):
    if not timestamp:
        return False
    return utcnow_timestamp() - timestamp < 120


def do_completer():
    # TODO: Hmm, this doesn't get commands, only flags...
    from genzshcomp import CompletionGenerator
    p = get_argument_parser()
    print(CompletionGenerator('tau', p).get())


# Application titles which signify inactivity and should not be tracked.
INACTIVE_APPLICATIONS = {
    'gnome-screensaver'
}

if __name__ == '__main__':
    main()
